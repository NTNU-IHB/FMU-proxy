import org.gradle.internal.os.OperatingSystem;

plugins {
    id 'java-library'
}

apply from: rootProject.file("gradle/mavenpublish.gradle")
apply from: rootProject.file("gradle/bintraypublish.gradle")

dependencies {

    api group: 'org.apache.thrift', name: 'libthrift', version: '0.13.0'
    implementation("javax.annotation:javax.annotation-api:1.3.2")

}


if (!getProperties().get("disableCodeGeneration", false)) {

    def definitions = project.file("src/main/thrift")
    def generatedSrcDir = project.file("build/generated/src/main/thrift")
    sourceSets.main.java.srcDirs += generatedSrcDir


    def os = OperatingSystem.current()

    Object thriftCompiler = null
    if (os.isWindows()) {
        def thriftFile = project.file('thrift.exe')
        if (!thriftFile.exists()) {
            def url = new URL("https://apache.uib.no/thrift/0.13.0/thrift-0.13.0.exe")
            thriftFile << url.getBytes()
        }
        thriftCompiler = project.file('thrift')
    } else {
        thriftCompiler = new File("usr/bin/thrift")
    }

    println thriftCompiler

    tasks.create('generateThrift') {

        doLast {

            generatedSrcDir.mkdirs()

            try {

                exec {
                    workingDir(projectDir)
                    executable thriftCompiler
                    args 'thrift', '-r', '-out', generatedSrcDir, '--gen', 'java:private-members,fullcamel',
                            "$definitions/defs.thrift"
                }
                exec {
                    workingDir(projectDir)
                    executable thriftCompiler
                    args '-r', '-out', generatedSrcDir, '--gen', 'java:private-members,fullcamel',
                            "$definitions/service.thrift"
                }
                exec {
                    workingDir(projectDir)
                    executable thriftCompiler
                    args '-r', '-out', generatedSrcDir, '--gen', 'java:private-members,fullcamel',
                            "$definitions/internal_service.thrift"
                }

            } catch (Exception ex) {
                println ex
            }

        }

        group 'thrift'
        compileJava.dependsOn generateThrift

    }

}

