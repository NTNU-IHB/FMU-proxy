/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package no.ntnu.ihb.fmuproxy.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-12-01")
public class BulkRead implements org.apache.thrift.TBase<BulkRead, BulkRead._Fields>, java.io.Serializable, Cloneable, Comparable<BulkRead> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BulkRead");

  private static final org.apache.thrift.protocol.TField INT_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("intValue", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField REAL_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("realValue", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STRING_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValue", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BOOLEAN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("booleanValue", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BulkReadStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BulkReadTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> intValue; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> realValue; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> stringValue; // required
  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> booleanValue; // required
  private @org.apache.thrift.annotation.Nullable Status status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INT_VALUE((short)1, "intValue"),
    REAL_VALUE((short)2, "realValue"),
    STRING_VALUE((short)3, "stringValue"),
    BOOLEAN_VALUE((short)4, "booleanValue"),
    /**
     * 
     * @see Status
     */
    STATUS((short)5, "status");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INT_VALUE
          return INT_VALUE;
        case 2: // REAL_VALUE
          return REAL_VALUE;
        case 3: // STRING_VALUE
          return STRING_VALUE;
        case 4: // BOOLEAN_VALUE
          return BOOLEAN_VALUE;
        case 5: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INT_VALUE, new org.apache.thrift.meta_data.FieldMetaData("intValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "IntArray")));
    tmpMap.put(_Fields.REAL_VALUE, new org.apache.thrift.meta_data.FieldMetaData("realValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "RealArray")));
    tmpMap.put(_Fields.STRING_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stringValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "StringArray")));
    tmpMap.put(_Fields.BOOLEAN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("booleanValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "BooleanArray")));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BulkRead.class, metaDataMap);
  }

  public BulkRead() {
  }

  public BulkRead(
    java.util.List<java.lang.Integer> intValue,
    java.util.List<java.lang.Double> realValue,
    java.util.List<java.lang.String> stringValue,
    java.util.List<java.lang.Boolean> booleanValue,
    Status status)
  {
    this();
    this.intValue = intValue;
    this.realValue = realValue;
    this.stringValue = stringValue;
    this.booleanValue = booleanValue;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BulkRead(BulkRead other) {
    if (other.isSetIntValue()) {
      java.util.List<java.lang.Integer> __this__intValue = new java.util.ArrayList<java.lang.Integer>(other.intValue);
      this.intValue = __this__intValue;
    }
    if (other.isSetRealValue()) {
      java.util.List<java.lang.Double> __this__realValue = new java.util.ArrayList<java.lang.Double>(other.realValue);
      this.realValue = __this__realValue;
    }
    if (other.isSetStringValue()) {
      java.util.List<java.lang.String> __this__stringValue = new java.util.ArrayList<java.lang.String>(other.stringValue);
      this.stringValue = __this__stringValue;
    }
    if (other.isSetBooleanValue()) {
      java.util.List<java.lang.Boolean> __this__booleanValue = new java.util.ArrayList<java.lang.Boolean>(other.booleanValue);
      this.booleanValue = __this__booleanValue;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
  }

  public BulkRead deepCopy() {
    return new BulkRead(this);
  }

  @Override
  public void clear() {
    this.intValue = null;
    this.realValue = null;
    this.stringValue = null;
    this.booleanValue = null;
    this.status = null;
  }

  public int getIntValueSize() {
    return (this.intValue == null) ? 0 : this.intValue.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getIntValueIterator() {
    return (this.intValue == null) ? null : this.intValue.iterator();
  }

  public void addToIntValue(int elem) {
    if (this.intValue == null) {
      this.intValue = new java.util.ArrayList<java.lang.Integer>();
    }
    this.intValue.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getIntValue() {
    return this.intValue;
  }

  public BulkRead setIntValue(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> intValue) {
    this.intValue = intValue;
    return this;
  }

  public void unsetIntValue() {
    this.intValue = null;
  }

  /** Returns true if field intValue is set (has been assigned a value) and false otherwise */
  public boolean isSetIntValue() {
    return this.intValue != null;
  }

  public void setIntValueIsSet(boolean value) {
    if (!value) {
      this.intValue = null;
    }
  }

  public int getRealValueSize() {
    return (this.realValue == null) ? 0 : this.realValue.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getRealValueIterator() {
    return (this.realValue == null) ? null : this.realValue.iterator();
  }

  public void addToRealValue(double elem) {
    if (this.realValue == null) {
      this.realValue = new java.util.ArrayList<java.lang.Double>();
    }
    this.realValue.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getRealValue() {
    return this.realValue;
  }

  public BulkRead setRealValue(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> realValue) {
    this.realValue = realValue;
    return this;
  }

  public void unsetRealValue() {
    this.realValue = null;
  }

  /** Returns true if field realValue is set (has been assigned a value) and false otherwise */
  public boolean isSetRealValue() {
    return this.realValue != null;
  }

  public void setRealValueIsSet(boolean value) {
    if (!value) {
      this.realValue = null;
    }
  }

  public int getStringValueSize() {
    return (this.stringValue == null) ? 0 : this.stringValue.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getStringValueIterator() {
    return (this.stringValue == null) ? null : this.stringValue.iterator();
  }

  public void addToStringValue(java.lang.String elem) {
    if (this.stringValue == null) {
      this.stringValue = new java.util.ArrayList<java.lang.String>();
    }
    this.stringValue.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getStringValue() {
    return this.stringValue;
  }

  public BulkRead setStringValue(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  public void unsetStringValue() {
    this.stringValue = null;
  }

  /** Returns true if field stringValue is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValue() {
    return this.stringValue != null;
  }

  public void setStringValueIsSet(boolean value) {
    if (!value) {
      this.stringValue = null;
    }
  }

  public int getBooleanValueSize() {
    return (this.booleanValue == null) ? 0 : this.booleanValue.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getBooleanValueIterator() {
    return (this.booleanValue == null) ? null : this.booleanValue.iterator();
  }

  public void addToBooleanValue(boolean elem) {
    if (this.booleanValue == null) {
      this.booleanValue = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.booleanValue.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getBooleanValue() {
    return this.booleanValue;
  }

  public BulkRead setBooleanValue(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> booleanValue) {
    this.booleanValue = booleanValue;
    return this;
  }

  public void unsetBooleanValue() {
    this.booleanValue = null;
  }

  /** Returns true if field booleanValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanValue() {
    return this.booleanValue != null;
  }

  public void setBooleanValueIsSet(boolean value) {
    if (!value) {
      this.booleanValue = null;
    }
  }

  /**
   * 
   * @see Status
   */
  @org.apache.thrift.annotation.Nullable
  public Status getStatus() {
    return this.status;
  }

  /**
   * 
   * @see Status
   */
  public BulkRead setStatus(@org.apache.thrift.annotation.Nullable Status status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INT_VALUE:
      if (value == null) {
        unsetIntValue();
      } else {
        setIntValue((java.util.List<java.lang.Integer>)value);
      }
      break;

    case REAL_VALUE:
      if (value == null) {
        unsetRealValue();
      } else {
        setRealValue((java.util.List<java.lang.Double>)value);
      }
      break;

    case STRING_VALUE:
      if (value == null) {
        unsetStringValue();
      } else {
        setStringValue((java.util.List<java.lang.String>)value);
      }
      break;

    case BOOLEAN_VALUE:
      if (value == null) {
        unsetBooleanValue();
      } else {
        setBooleanValue((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Status)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INT_VALUE:
      return getIntValue();

    case REAL_VALUE:
      return getRealValue();

    case STRING_VALUE:
      return getStringValue();

    case BOOLEAN_VALUE:
      return getBooleanValue();

    case STATUS:
      return getStatus();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INT_VALUE:
      return isSetIntValue();
    case REAL_VALUE:
      return isSetRealValue();
    case STRING_VALUE:
      return isSetStringValue();
    case BOOLEAN_VALUE:
      return isSetBooleanValue();
    case STATUS:
      return isSetStatus();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BulkRead)
      return this.equals((BulkRead)that);
    return false;
  }

  public boolean equals(BulkRead that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_intValue = true && this.isSetIntValue();
    boolean that_present_intValue = true && that.isSetIntValue();
    if (this_present_intValue || that_present_intValue) {
      if (!(this_present_intValue && that_present_intValue))
        return false;
      if (!this.intValue.equals(that.intValue))
        return false;
    }

    boolean this_present_realValue = true && this.isSetRealValue();
    boolean that_present_realValue = true && that.isSetRealValue();
    if (this_present_realValue || that_present_realValue) {
      if (!(this_present_realValue && that_present_realValue))
        return false;
      if (!this.realValue.equals(that.realValue))
        return false;
    }

    boolean this_present_stringValue = true && this.isSetStringValue();
    boolean that_present_stringValue = true && that.isSetStringValue();
    if (this_present_stringValue || that_present_stringValue) {
      if (!(this_present_stringValue && that_present_stringValue))
        return false;
      if (!this.stringValue.equals(that.stringValue))
        return false;
    }

    boolean this_present_booleanValue = true && this.isSetBooleanValue();
    boolean that_present_booleanValue = true && that.isSetBooleanValue();
    if (this_present_booleanValue || that_present_booleanValue) {
      if (!(this_present_booleanValue && that_present_booleanValue))
        return false;
      if (!this.booleanValue.equals(that.booleanValue))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetIntValue()) ? 131071 : 524287);
    if (isSetIntValue())
      hashCode = hashCode * 8191 + intValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetRealValue()) ? 131071 : 524287);
    if (isSetRealValue())
      hashCode = hashCode * 8191 + realValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetStringValue()) ? 131071 : 524287);
    if (isSetStringValue())
      hashCode = hashCode * 8191 + stringValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetBooleanValue()) ? 131071 : 524287);
    if (isSetBooleanValue())
      hashCode = hashCode * 8191 + booleanValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(BulkRead other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIntValue()).compareTo(other.isSetIntValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intValue, other.intValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRealValue()).compareTo(other.isSetRealValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realValue, other.realValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStringValue()).compareTo(other.isSetStringValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValue, other.stringValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBooleanValue()).compareTo(other.isSetBooleanValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booleanValue, other.booleanValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BulkRead(");
    boolean first = true;

    sb.append("intValue:");
    if (this.intValue == null) {
      sb.append("null");
    } else {
      sb.append(this.intValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realValue:");
    if (this.realValue == null) {
      sb.append("null");
    } else {
      sb.append(this.realValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringValue:");
    if (this.stringValue == null) {
      sb.append("null");
    } else {
      sb.append(this.stringValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("booleanValue:");
    if (this.booleanValue == null) {
      sb.append("null");
    } else {
      sb.append(this.booleanValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BulkReadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BulkReadStandardScheme getScheme() {
      return new BulkReadStandardScheme();
    }
  }

  private static class BulkReadStandardScheme extends org.apache.thrift.scheme.StandardScheme<BulkRead> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BulkRead struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INT_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.intValue = new java.util.ArrayList<java.lang.Integer>(_list72.size);
                int _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = iprot.readI32();
                  struct.intValue.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setIntValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REAL_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list75 = iprot.readListBegin();
                struct.realValue = new java.util.ArrayList<java.lang.Double>(_list75.size);
                double _elem76;
                for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                {
                  _elem76 = iprot.readDouble();
                  struct.realValue.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setRealValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                struct.stringValue = new java.util.ArrayList<java.lang.String>(_list78.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem79;
                for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                {
                  _elem79 = iprot.readString();
                  struct.stringValue.add(_elem79);
                }
                iprot.readListEnd();
              }
              struct.setStringValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BOOLEAN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list81 = iprot.readListBegin();
                struct.booleanValue = new java.util.ArrayList<java.lang.Boolean>(_list81.size);
                boolean _elem82;
                for (int _i83 = 0; _i83 < _list81.size; ++_i83)
                {
                  _elem82 = iprot.readBool();
                  struct.booleanValue.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setBooleanValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BulkRead struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.intValue != null) {
        oprot.writeFieldBegin(INT_VALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intValue.size()));
          for (int _iter84 : struct.intValue)
          {
            oprot.writeI32(_iter84);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.realValue != null) {
        oprot.writeFieldBegin(REAL_VALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.realValue.size()));
          for (double _iter85 : struct.realValue)
          {
            oprot.writeDouble(_iter85);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stringValue != null) {
        oprot.writeFieldBegin(STRING_VALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stringValue.size()));
          for (java.lang.String _iter86 : struct.stringValue)
          {
            oprot.writeString(_iter86);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.booleanValue != null) {
        oprot.writeFieldBegin(BOOLEAN_VALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.booleanValue.size()));
          for (boolean _iter87 : struct.booleanValue)
          {
            oprot.writeBool(_iter87);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BulkReadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BulkReadTupleScheme getScheme() {
      return new BulkReadTupleScheme();
    }
  }

  private static class BulkReadTupleScheme extends org.apache.thrift.scheme.TupleScheme<BulkRead> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BulkRead struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIntValue()) {
        optionals.set(0);
      }
      if (struct.isSetRealValue()) {
        optionals.set(1);
      }
      if (struct.isSetStringValue()) {
        optionals.set(2);
      }
      if (struct.isSetBooleanValue()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIntValue()) {
        {
          oprot.writeI32(struct.intValue.size());
          for (int _iter88 : struct.intValue)
          {
            oprot.writeI32(_iter88);
          }
        }
      }
      if (struct.isSetRealValue()) {
        {
          oprot.writeI32(struct.realValue.size());
          for (double _iter89 : struct.realValue)
          {
            oprot.writeDouble(_iter89);
          }
        }
      }
      if (struct.isSetStringValue()) {
        {
          oprot.writeI32(struct.stringValue.size());
          for (java.lang.String _iter90 : struct.stringValue)
          {
            oprot.writeString(_iter90);
          }
        }
      }
      if (struct.isSetBooleanValue()) {
        {
          oprot.writeI32(struct.booleanValue.size());
          for (boolean _iter91 : struct.booleanValue)
          {
            oprot.writeBool(_iter91);
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BulkRead struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list92 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intValue = new java.util.ArrayList<java.lang.Integer>(_list92.size);
          int _elem93;
          for (int _i94 = 0; _i94 < _list92.size; ++_i94)
          {
            _elem93 = iprot.readI32();
            struct.intValue.add(_elem93);
          }
        }
        struct.setIntValueIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.realValue = new java.util.ArrayList<java.lang.Double>(_list95.size);
          double _elem96;
          for (int _i97 = 0; _i97 < _list95.size; ++_i97)
          {
            _elem96 = iprot.readDouble();
            struct.realValue.add(_elem96);
          }
        }
        struct.setRealValueIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stringValue = new java.util.ArrayList<java.lang.String>(_list98.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem99;
          for (int _i100 = 0; _i100 < _list98.size; ++_i100)
          {
            _elem99 = iprot.readString();
            struct.stringValue.add(_elem99);
          }
        }
        struct.setStringValueIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.booleanValue = new java.util.ArrayList<java.lang.Boolean>(_list101.size);
          boolean _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = iprot.readBool();
            struct.booleanValue.add(_elem102);
          }
        }
        struct.setBooleanValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = no.ntnu.ihb.fmuproxy.thrift.Status.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

