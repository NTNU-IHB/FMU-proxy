/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package no.ntnu.ihb.fmuproxy.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-09-18")
public class ModelDescription implements org.apache.thrift.TBase<ModelDescription, ModelDescription._Fields>, java.io.Serializable, Cloneable, Comparable<ModelDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelDescription");

  private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FMI_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("fmi_version", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MODEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("modelName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LICENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("license", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COPYRIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("copyright", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField GENERATION_TOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("generation_tool", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField GENERATION_DATE_AND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("generation_date_and_time", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DEFAULT_EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("default_experiment", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField VARIABLE_NAMING_CONVENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("variable_naming_convention", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MODEL_VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("model_variables", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField MODEL_STRUCTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("model_structure", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField MODEL_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("model_identifier", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CAN_GET_AND_SET_FMU_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("can_get_and_set_fmu_state", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField CAN_SERIALIZE_FMU_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("can_serialize_fmu_state", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField PROVIDES_DIRECTIONAL_DERIVATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("provides_directional_derivative", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("can_handle_variable_communication_step_size", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField CAN_INTERPOLATE_INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("can_interpolate_inputs", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField MAX_OUTPUT_DERIVATIVE_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("max_output_derivative_order", org.apache.thrift.protocol.TType.I32, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ModelDescriptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ModelDescriptionTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.lang.String guid; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String fmi_version; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String modelName; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String license; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String copyright; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String author; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String version; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String description; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String generation_tool; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String generation_date_and_time; // optional
  private @org.apache.thrift.annotation.Nullable DefaultExperiment default_experiment; // optional
  private @org.apache.thrift.annotation.Nullable java.lang.String variable_naming_convention; // optional
  private @org.apache.thrift.annotation.Nullable java.util.List<ScalarVariable> model_variables; // required
  private @org.apache.thrift.annotation.Nullable ModelStructure model_structure; // required
  private @org.apache.thrift.annotation.Nullable java.lang.String model_identifier; // required
  private boolean can_get_and_set_fmu_state; // required
  private boolean can_serialize_fmu_state; // required
  private boolean provides_directional_derivative; // required
  private boolean can_handle_variable_communication_step_size; // required
  private boolean can_interpolate_inputs; // required
  private int max_output_derivative_order; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GUID((short)1, "guid"),
    FMI_VERSION((short)2, "fmi_version"),
    MODEL_NAME((short)3, "modelName"),
    LICENSE((short)4, "license"),
    COPYRIGHT((short)5, "copyright"),
    AUTHOR((short)6, "author"),
    VERSION((short)7, "version"),
    DESCRIPTION((short)8, "description"),
    GENERATION_TOOL((short)9, "generation_tool"),
    GENERATION_DATE_AND_TIME((short)10, "generation_date_and_time"),
    DEFAULT_EXPERIMENT((short)11, "default_experiment"),
    VARIABLE_NAMING_CONVENTION((short)12, "variable_naming_convention"),
    MODEL_VARIABLES((short)13, "model_variables"),
    MODEL_STRUCTURE((short)14, "model_structure"),
    MODEL_IDENTIFIER((short)15, "model_identifier"),
    CAN_GET_AND_SET_FMU_STATE((short)16, "can_get_and_set_fmu_state"),
    CAN_SERIALIZE_FMU_STATE((short)17, "can_serialize_fmu_state"),
    PROVIDES_DIRECTIONAL_DERIVATIVE((short)18, "provides_directional_derivative"),
    CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE((short)19, "can_handle_variable_communication_step_size"),
    CAN_INTERPOLATE_INPUTS((short)20, "can_interpolate_inputs"),
    MAX_OUTPUT_DERIVATIVE_ORDER((short)21, "max_output_derivative_order");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GUID
          return GUID;
        case 2: // FMI_VERSION
          return FMI_VERSION;
        case 3: // MODEL_NAME
          return MODEL_NAME;
        case 4: // LICENSE
          return LICENSE;
        case 5: // COPYRIGHT
          return COPYRIGHT;
        case 6: // AUTHOR
          return AUTHOR;
        case 7: // VERSION
          return VERSION;
        case 8: // DESCRIPTION
          return DESCRIPTION;
        case 9: // GENERATION_TOOL
          return GENERATION_TOOL;
        case 10: // GENERATION_DATE_AND_TIME
          return GENERATION_DATE_AND_TIME;
        case 11: // DEFAULT_EXPERIMENT
          return DEFAULT_EXPERIMENT;
        case 12: // VARIABLE_NAMING_CONVENTION
          return VARIABLE_NAMING_CONVENTION;
        case 13: // MODEL_VARIABLES
          return MODEL_VARIABLES;
        case 14: // MODEL_STRUCTURE
          return MODEL_STRUCTURE;
        case 15: // MODEL_IDENTIFIER
          return MODEL_IDENTIFIER;
        case 16: // CAN_GET_AND_SET_FMU_STATE
          return CAN_GET_AND_SET_FMU_STATE;
        case 17: // CAN_SERIALIZE_FMU_STATE
          return CAN_SERIALIZE_FMU_STATE;
        case 18: // PROVIDES_DIRECTIONAL_DERIVATIVE
          return PROVIDES_DIRECTIONAL_DERIVATIVE;
        case 19: // CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE
          return CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE;
        case 20: // CAN_INTERPOLATE_INPUTS
          return CAN_INTERPOLATE_INPUTS;
        case 21: // MAX_OUTPUT_DERIVATIVE_ORDER
          return MAX_OUTPUT_DERIVATIVE_ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CAN_GET_AND_SET_FMU_STATE_ISSET_ID = 0;
  private static final int __CAN_SERIALIZE_FMU_STATE_ISSET_ID = 1;
  private static final int __PROVIDES_DIRECTIONAL_DERIVATIVE_ISSET_ID = 2;
  private static final int __CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE_ISSET_ID = 3;
  private static final int __CAN_INTERPOLATE_INPUTS_ISSET_ID = 4;
  private static final int __MAX_OUTPUT_DERIVATIVE_ORDER_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LICENSE,_Fields.COPYRIGHT,_Fields.AUTHOR,_Fields.VERSION,_Fields.DESCRIPTION,_Fields.GENERATION_TOOL,_Fields.GENERATION_DATE_AND_TIME,_Fields.DEFAULT_EXPERIMENT,_Fields.VARIABLE_NAMING_CONVENTION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FMI_VERSION, new org.apache.thrift.meta_data.FieldMetaData("fmi_version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("modelName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LICENSE, new org.apache.thrift.meta_data.FieldMetaData("license", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COPYRIGHT, new org.apache.thrift.meta_data.FieldMetaData("copyright", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENERATION_TOOL, new org.apache.thrift.meta_data.FieldMetaData("generation_tool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENERATION_DATE_AND_TIME, new org.apache.thrift.meta_data.FieldMetaData("generation_date_and_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEFAULT_EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("default_experiment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DefaultExperiment.class)));
    tmpMap.put(_Fields.VARIABLE_NAMING_CONVENTION, new org.apache.thrift.meta_data.FieldMetaData("variable_naming_convention", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("model_variables", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "ModelVariables")));
    tmpMap.put(_Fields.MODEL_STRUCTURE, new org.apache.thrift.meta_data.FieldMetaData("model_structure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelStructure.class)));
    tmpMap.put(_Fields.MODEL_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("model_identifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAN_GET_AND_SET_FMU_STATE, new org.apache.thrift.meta_data.FieldMetaData("can_get_and_set_fmu_state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CAN_SERIALIZE_FMU_STATE, new org.apache.thrift.meta_data.FieldMetaData("can_serialize_fmu_state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PROVIDES_DIRECTIONAL_DERIVATIVE, new org.apache.thrift.meta_data.FieldMetaData("provides_directional_derivative", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE, new org.apache.thrift.meta_data.FieldMetaData("can_handle_variable_communication_step_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CAN_INTERPOLATE_INPUTS, new org.apache.thrift.meta_data.FieldMetaData("can_interpolate_inputs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_OUTPUT_DERIVATIVE_ORDER, new org.apache.thrift.meta_data.FieldMetaData("max_output_derivative_order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelDescription.class, metaDataMap);
  }

  public ModelDescription() {
  }

  public ModelDescription(
    java.lang.String guid,
    java.lang.String fmi_version,
    java.lang.String modelName,
    java.util.List<ScalarVariable> model_variables,
    ModelStructure model_structure,
    java.lang.String model_identifier,
    boolean can_get_and_set_fmu_state,
    boolean can_serialize_fmu_state,
    boolean provides_directional_derivative,
    boolean can_handle_variable_communication_step_size,
    boolean can_interpolate_inputs,
    int max_output_derivative_order)
  {
    this();
    this.guid = guid;
    this.fmi_version = fmi_version;
    this.modelName = modelName;
    this.model_variables = model_variables;
    this.model_structure = model_structure;
    this.model_identifier = model_identifier;
    this.can_get_and_set_fmu_state = can_get_and_set_fmu_state;
    setCanGetAndSetFmuStateIsSet(true);
    this.can_serialize_fmu_state = can_serialize_fmu_state;
    setCanSerializeFmuStateIsSet(true);
    this.provides_directional_derivative = provides_directional_derivative;
    setProvidesDirectionalDerivativeIsSet(true);
    this.can_handle_variable_communication_step_size = can_handle_variable_communication_step_size;
    setCanHandleVariableCommunicationStepSizeIsSet(true);
    this.can_interpolate_inputs = can_interpolate_inputs;
    setCanInterpolateInputsIsSet(true);
    this.max_output_derivative_order = max_output_derivative_order;
    setMaxOutputDerivativeOrderIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelDescription(ModelDescription other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGuid()) {
      this.guid = other.guid;
    }
    if (other.isSetFmiVersion()) {
      this.fmi_version = other.fmi_version;
    }
    if (other.isSetModelName()) {
      this.modelName = other.modelName;
    }
    if (other.isSetLicense()) {
      this.license = other.license;
    }
    if (other.isSetCopyright()) {
      this.copyright = other.copyright;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetGenerationTool()) {
      this.generation_tool = other.generation_tool;
    }
    if (other.isSetGenerationDateAndTime()) {
      this.generation_date_and_time = other.generation_date_and_time;
    }
    if (other.isSetDefaultExperiment()) {
      this.default_experiment = new DefaultExperiment(other.default_experiment);
    }
    if (other.isSetVariableNamingConvention()) {
      this.variable_naming_convention = other.variable_naming_convention;
    }
    if (other.isSetModelVariables()) {
      java.util.List<ScalarVariable> __this__model_variables = new java.util.ArrayList<ScalarVariable>(other.model_variables.size());
      for (ScalarVariable other_element : other.model_variables) {
        __this__model_variables.add(new ScalarVariable(other_element));
      }
      this.model_variables = __this__model_variables;
    }
    if (other.isSetModelStructure()) {
      this.model_structure = new ModelStructure(other.model_structure);
    }
    if (other.isSetModelIdentifier()) {
      this.model_identifier = other.model_identifier;
    }
    this.can_get_and_set_fmu_state = other.can_get_and_set_fmu_state;
    this.can_serialize_fmu_state = other.can_serialize_fmu_state;
    this.provides_directional_derivative = other.provides_directional_derivative;
    this.can_handle_variable_communication_step_size = other.can_handle_variable_communication_step_size;
    this.can_interpolate_inputs = other.can_interpolate_inputs;
    this.max_output_derivative_order = other.max_output_derivative_order;
  }

  public ModelDescription deepCopy() {
    return new ModelDescription(this);
  }

  @Override
  public void clear() {
    this.guid = null;
    this.fmi_version = null;
    this.modelName = null;
    this.license = null;
    this.copyright = null;
    this.author = null;
    this.version = null;
    this.description = null;
    this.generation_tool = null;
    this.generation_date_and_time = null;
    this.default_experiment = null;
    this.variable_naming_convention = null;
    this.model_variables = null;
    this.model_structure = null;
    this.model_identifier = null;
    setCanGetAndSetFmuStateIsSet(false);
    this.can_get_and_set_fmu_state = false;
    setCanSerializeFmuStateIsSet(false);
    this.can_serialize_fmu_state = false;
    setProvidesDirectionalDerivativeIsSet(false);
    this.provides_directional_derivative = false;
    setCanHandleVariableCommunicationStepSizeIsSet(false);
    this.can_handle_variable_communication_step_size = false;
    setCanInterpolateInputsIsSet(false);
    this.can_interpolate_inputs = false;
    setMaxOutputDerivativeOrderIsSet(false);
    this.max_output_derivative_order = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGuid() {
    return this.guid;
  }

  public ModelDescription setGuid(@org.apache.thrift.annotation.Nullable java.lang.String guid) {
    this.guid = guid;
    return this;
  }

  public void unsetGuid() {
    this.guid = null;
  }

  /** Returns true if field guid is set (has been assigned a value) and false otherwise */
  public boolean isSetGuid() {
    return this.guid != null;
  }

  public void setGuidIsSet(boolean value) {
    if (!value) {
      this.guid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFmiVersion() {
    return this.fmi_version;
  }

  public ModelDescription setFmiVersion(@org.apache.thrift.annotation.Nullable java.lang.String fmi_version) {
    this.fmi_version = fmi_version;
    return this;
  }

  public void unsetFmiVersion() {
    this.fmi_version = null;
  }

  /** Returns true if field fmi_version is set (has been assigned a value) and false otherwise */
  public boolean isSetFmiVersion() {
    return this.fmi_version != null;
  }

  public void setFmiVersionIsSet(boolean value) {
    if (!value) {
      this.fmi_version = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getModelName() {
    return this.modelName;
  }

  public ModelDescription setModelName(@org.apache.thrift.annotation.Nullable java.lang.String modelName) {
    this.modelName = modelName;
    return this;
  }

  public void unsetModelName() {
    this.modelName = null;
  }

  /** Returns true if field modelName is set (has been assigned a value) and false otherwise */
  public boolean isSetModelName() {
    return this.modelName != null;
  }

  public void setModelNameIsSet(boolean value) {
    if (!value) {
      this.modelName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLicense() {
    return this.license;
  }

  public ModelDescription setLicense(@org.apache.thrift.annotation.Nullable java.lang.String license) {
    this.license = license;
    return this;
  }

  public void unsetLicense() {
    this.license = null;
  }

  /** Returns true if field license is set (has been assigned a value) and false otherwise */
  public boolean isSetLicense() {
    return this.license != null;
  }

  public void setLicenseIsSet(boolean value) {
    if (!value) {
      this.license = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCopyright() {
    return this.copyright;
  }

  public ModelDescription setCopyright(@org.apache.thrift.annotation.Nullable java.lang.String copyright) {
    this.copyright = copyright;
    return this;
  }

  public void unsetCopyright() {
    this.copyright = null;
  }

  /** Returns true if field copyright is set (has been assigned a value) and false otherwise */
  public boolean isSetCopyright() {
    return this.copyright != null;
  }

  public void setCopyrightIsSet(boolean value) {
    if (!value) {
      this.copyright = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAuthor() {
    return this.author;
  }

  public ModelDescription setAuthor(@org.apache.thrift.annotation.Nullable java.lang.String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersion() {
    return this.version;
  }

  public ModelDescription setVersion(@org.apache.thrift.annotation.Nullable java.lang.String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescription() {
    return this.description;
  }

  public ModelDescription setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGenerationTool() {
    return this.generation_tool;
  }

  public ModelDescription setGenerationTool(@org.apache.thrift.annotation.Nullable java.lang.String generation_tool) {
    this.generation_tool = generation_tool;
    return this;
  }

  public void unsetGenerationTool() {
    this.generation_tool = null;
  }

  /** Returns true if field generation_tool is set (has been assigned a value) and false otherwise */
  public boolean isSetGenerationTool() {
    return this.generation_tool != null;
  }

  public void setGenerationToolIsSet(boolean value) {
    if (!value) {
      this.generation_tool = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getGenerationDateAndTime() {
    return this.generation_date_and_time;
  }

  public ModelDescription setGenerationDateAndTime(@org.apache.thrift.annotation.Nullable java.lang.String generation_date_and_time) {
    this.generation_date_and_time = generation_date_and_time;
    return this;
  }

  public void unsetGenerationDateAndTime() {
    this.generation_date_and_time = null;
  }

  /** Returns true if field generation_date_and_time is set (has been assigned a value) and false otherwise */
  public boolean isSetGenerationDateAndTime() {
    return this.generation_date_and_time != null;
  }

  public void setGenerationDateAndTimeIsSet(boolean value) {
    if (!value) {
      this.generation_date_and_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public DefaultExperiment getDefaultExperiment() {
    return this.default_experiment;
  }

  public ModelDescription setDefaultExperiment(@org.apache.thrift.annotation.Nullable DefaultExperiment default_experiment) {
    this.default_experiment = default_experiment;
    return this;
  }

  public void unsetDefaultExperiment() {
    this.default_experiment = null;
  }

  /** Returns true if field default_experiment is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultExperiment() {
    return this.default_experiment != null;
  }

  public void setDefaultExperimentIsSet(boolean value) {
    if (!value) {
      this.default_experiment = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVariableNamingConvention() {
    return this.variable_naming_convention;
  }

  public ModelDescription setVariableNamingConvention(@org.apache.thrift.annotation.Nullable java.lang.String variable_naming_convention) {
    this.variable_naming_convention = variable_naming_convention;
    return this;
  }

  public void unsetVariableNamingConvention() {
    this.variable_naming_convention = null;
  }

  /** Returns true if field variable_naming_convention is set (has been assigned a value) and false otherwise */
  public boolean isSetVariableNamingConvention() {
    return this.variable_naming_convention != null;
  }

  public void setVariableNamingConventionIsSet(boolean value) {
    if (!value) {
      this.variable_naming_convention = null;
    }
  }

  public int getModelVariablesSize() {
    return (this.model_variables == null) ? 0 : this.model_variables.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ScalarVariable> getModelVariablesIterator() {
    return (this.model_variables == null) ? null : this.model_variables.iterator();
  }

  public void addToModelVariables(ScalarVariable elem) {
    if (this.model_variables == null) {
      this.model_variables = new java.util.ArrayList<ScalarVariable>();
    }
    this.model_variables.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ScalarVariable> getModelVariables() {
    return this.model_variables;
  }

  public ModelDescription setModelVariables(@org.apache.thrift.annotation.Nullable java.util.List<ScalarVariable> model_variables) {
    this.model_variables = model_variables;
    return this;
  }

  public void unsetModelVariables() {
    this.model_variables = null;
  }

  /** Returns true if field model_variables is set (has been assigned a value) and false otherwise */
  public boolean isSetModelVariables() {
    return this.model_variables != null;
  }

  public void setModelVariablesIsSet(boolean value) {
    if (!value) {
      this.model_variables = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ModelStructure getModelStructure() {
    return this.model_structure;
  }

  public ModelDescription setModelStructure(@org.apache.thrift.annotation.Nullable ModelStructure model_structure) {
    this.model_structure = model_structure;
    return this;
  }

  public void unsetModelStructure() {
    this.model_structure = null;
  }

  /** Returns true if field model_structure is set (has been assigned a value) and false otherwise */
  public boolean isSetModelStructure() {
    return this.model_structure != null;
  }

  public void setModelStructureIsSet(boolean value) {
    if (!value) {
      this.model_structure = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getModelIdentifier() {
    return this.model_identifier;
  }

  public ModelDescription setModelIdentifier(@org.apache.thrift.annotation.Nullable java.lang.String model_identifier) {
    this.model_identifier = model_identifier;
    return this;
  }

  public void unsetModelIdentifier() {
    this.model_identifier = null;
  }

  /** Returns true if field model_identifier is set (has been assigned a value) and false otherwise */
  public boolean isSetModelIdentifier() {
    return this.model_identifier != null;
  }

  public void setModelIdentifierIsSet(boolean value) {
    if (!value) {
      this.model_identifier = null;
    }
  }

  public boolean isCanGetAndSetFmuState() {
    return this.can_get_and_set_fmu_state;
  }

  public ModelDescription setCanGetAndSetFmuState(boolean can_get_and_set_fmu_state) {
    this.can_get_and_set_fmu_state = can_get_and_set_fmu_state;
    setCanGetAndSetFmuStateIsSet(true);
    return this;
  }

  public void unsetCanGetAndSetFmuState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAN_GET_AND_SET_FMU_STATE_ISSET_ID);
  }

  /** Returns true if field can_get_and_set_fmu_state is set (has been assigned a value) and false otherwise */
  public boolean isSetCanGetAndSetFmuState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAN_GET_AND_SET_FMU_STATE_ISSET_ID);
  }

  public void setCanGetAndSetFmuStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAN_GET_AND_SET_FMU_STATE_ISSET_ID, value);
  }

  public boolean isCanSerializeFmuState() {
    return this.can_serialize_fmu_state;
  }

  public ModelDescription setCanSerializeFmuState(boolean can_serialize_fmu_state) {
    this.can_serialize_fmu_state = can_serialize_fmu_state;
    setCanSerializeFmuStateIsSet(true);
    return this;
  }

  public void unsetCanSerializeFmuState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAN_SERIALIZE_FMU_STATE_ISSET_ID);
  }

  /** Returns true if field can_serialize_fmu_state is set (has been assigned a value) and false otherwise */
  public boolean isSetCanSerializeFmuState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAN_SERIALIZE_FMU_STATE_ISSET_ID);
  }

  public void setCanSerializeFmuStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAN_SERIALIZE_FMU_STATE_ISSET_ID, value);
  }

  public boolean isProvidesDirectionalDerivative() {
    return this.provides_directional_derivative;
  }

  public ModelDescription setProvidesDirectionalDerivative(boolean provides_directional_derivative) {
    this.provides_directional_derivative = provides_directional_derivative;
    setProvidesDirectionalDerivativeIsSet(true);
    return this;
  }

  public void unsetProvidesDirectionalDerivative() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROVIDES_DIRECTIONAL_DERIVATIVE_ISSET_ID);
  }

  /** Returns true if field provides_directional_derivative is set (has been assigned a value) and false otherwise */
  public boolean isSetProvidesDirectionalDerivative() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROVIDES_DIRECTIONAL_DERIVATIVE_ISSET_ID);
  }

  public void setProvidesDirectionalDerivativeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROVIDES_DIRECTIONAL_DERIVATIVE_ISSET_ID, value);
  }

  public boolean isCanHandleVariableCommunicationStepSize() {
    return this.can_handle_variable_communication_step_size;
  }

  public ModelDescription setCanHandleVariableCommunicationStepSize(boolean can_handle_variable_communication_step_size) {
    this.can_handle_variable_communication_step_size = can_handle_variable_communication_step_size;
    setCanHandleVariableCommunicationStepSizeIsSet(true);
    return this;
  }

  public void unsetCanHandleVariableCommunicationStepSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE_ISSET_ID);
  }

  /** Returns true if field can_handle_variable_communication_step_size is set (has been assigned a value) and false otherwise */
  public boolean isSetCanHandleVariableCommunicationStepSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE_ISSET_ID);
  }

  public void setCanHandleVariableCommunicationStepSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE_ISSET_ID, value);
  }

  public boolean isCanInterpolateInputs() {
    return this.can_interpolate_inputs;
  }

  public ModelDescription setCanInterpolateInputs(boolean can_interpolate_inputs) {
    this.can_interpolate_inputs = can_interpolate_inputs;
    setCanInterpolateInputsIsSet(true);
    return this;
  }

  public void unsetCanInterpolateInputs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAN_INTERPOLATE_INPUTS_ISSET_ID);
  }

  /** Returns true if field can_interpolate_inputs is set (has been assigned a value) and false otherwise */
  public boolean isSetCanInterpolateInputs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAN_INTERPOLATE_INPUTS_ISSET_ID);
  }

  public void setCanInterpolateInputsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAN_INTERPOLATE_INPUTS_ISSET_ID, value);
  }

  public int getMaxOutputDerivativeOrder() {
    return this.max_output_derivative_order;
  }

  public ModelDescription setMaxOutputDerivativeOrder(int max_output_derivative_order) {
    this.max_output_derivative_order = max_output_derivative_order;
    setMaxOutputDerivativeOrderIsSet(true);
    return this;
  }

  public void unsetMaxOutputDerivativeOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_OUTPUT_DERIVATIVE_ORDER_ISSET_ID);
  }

  /** Returns true if field max_output_derivative_order is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxOutputDerivativeOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_OUTPUT_DERIVATIVE_ORDER_ISSET_ID);
  }

  public void setMaxOutputDerivativeOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_OUTPUT_DERIVATIVE_ORDER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case GUID:
      if (value == null) {
        unsetGuid();
      } else {
        setGuid((java.lang.String)value);
      }
      break;

    case FMI_VERSION:
      if (value == null) {
        unsetFmiVersion();
      } else {
        setFmiVersion((java.lang.String)value);
      }
      break;

    case MODEL_NAME:
      if (value == null) {
        unsetModelName();
      } else {
        setModelName((java.lang.String)value);
      }
      break;

    case LICENSE:
      if (value == null) {
        unsetLicense();
      } else {
        setLicense((java.lang.String)value);
      }
      break;

    case COPYRIGHT:
      if (value == null) {
        unsetCopyright();
      } else {
        setCopyright((java.lang.String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case GENERATION_TOOL:
      if (value == null) {
        unsetGenerationTool();
      } else {
        setGenerationTool((java.lang.String)value);
      }
      break;

    case GENERATION_DATE_AND_TIME:
      if (value == null) {
        unsetGenerationDateAndTime();
      } else {
        setGenerationDateAndTime((java.lang.String)value);
      }
      break;

    case DEFAULT_EXPERIMENT:
      if (value == null) {
        unsetDefaultExperiment();
      } else {
        setDefaultExperiment((DefaultExperiment)value);
      }
      break;

    case VARIABLE_NAMING_CONVENTION:
      if (value == null) {
        unsetVariableNamingConvention();
      } else {
        setVariableNamingConvention((java.lang.String)value);
      }
      break;

    case MODEL_VARIABLES:
      if (value == null) {
        unsetModelVariables();
      } else {
        setModelVariables((java.util.List<ScalarVariable>)value);
      }
      break;

    case MODEL_STRUCTURE:
      if (value == null) {
        unsetModelStructure();
      } else {
        setModelStructure((ModelStructure)value);
      }
      break;

    case MODEL_IDENTIFIER:
      if (value == null) {
        unsetModelIdentifier();
      } else {
        setModelIdentifier((java.lang.String)value);
      }
      break;

    case CAN_GET_AND_SET_FMU_STATE:
      if (value == null) {
        unsetCanGetAndSetFmuState();
      } else {
        setCanGetAndSetFmuState((java.lang.Boolean)value);
      }
      break;

    case CAN_SERIALIZE_FMU_STATE:
      if (value == null) {
        unsetCanSerializeFmuState();
      } else {
        setCanSerializeFmuState((java.lang.Boolean)value);
      }
      break;

    case PROVIDES_DIRECTIONAL_DERIVATIVE:
      if (value == null) {
        unsetProvidesDirectionalDerivative();
      } else {
        setProvidesDirectionalDerivative((java.lang.Boolean)value);
      }
      break;

    case CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE:
      if (value == null) {
        unsetCanHandleVariableCommunicationStepSize();
      } else {
        setCanHandleVariableCommunicationStepSize((java.lang.Boolean)value);
      }
      break;

    case CAN_INTERPOLATE_INPUTS:
      if (value == null) {
        unsetCanInterpolateInputs();
      } else {
        setCanInterpolateInputs((java.lang.Boolean)value);
      }
      break;

    case MAX_OUTPUT_DERIVATIVE_ORDER:
      if (value == null) {
        unsetMaxOutputDerivativeOrder();
      } else {
        setMaxOutputDerivativeOrder((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GUID:
      return getGuid();

    case FMI_VERSION:
      return getFmiVersion();

    case MODEL_NAME:
      return getModelName();

    case LICENSE:
      return getLicense();

    case COPYRIGHT:
      return getCopyright();

    case AUTHOR:
      return getAuthor();

    case VERSION:
      return getVersion();

    case DESCRIPTION:
      return getDescription();

    case GENERATION_TOOL:
      return getGenerationTool();

    case GENERATION_DATE_AND_TIME:
      return getGenerationDateAndTime();

    case DEFAULT_EXPERIMENT:
      return getDefaultExperiment();

    case VARIABLE_NAMING_CONVENTION:
      return getVariableNamingConvention();

    case MODEL_VARIABLES:
      return getModelVariables();

    case MODEL_STRUCTURE:
      return getModelStructure();

    case MODEL_IDENTIFIER:
      return getModelIdentifier();

    case CAN_GET_AND_SET_FMU_STATE:
      return isCanGetAndSetFmuState();

    case CAN_SERIALIZE_FMU_STATE:
      return isCanSerializeFmuState();

    case PROVIDES_DIRECTIONAL_DERIVATIVE:
      return isProvidesDirectionalDerivative();

    case CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE:
      return isCanHandleVariableCommunicationStepSize();

    case CAN_INTERPOLATE_INPUTS:
      return isCanInterpolateInputs();

    case MAX_OUTPUT_DERIVATIVE_ORDER:
      return getMaxOutputDerivativeOrder();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GUID:
      return isSetGuid();
    case FMI_VERSION:
      return isSetFmiVersion();
    case MODEL_NAME:
      return isSetModelName();
    case LICENSE:
      return isSetLicense();
    case COPYRIGHT:
      return isSetCopyright();
    case AUTHOR:
      return isSetAuthor();
    case VERSION:
      return isSetVersion();
    case DESCRIPTION:
      return isSetDescription();
    case GENERATION_TOOL:
      return isSetGenerationTool();
    case GENERATION_DATE_AND_TIME:
      return isSetGenerationDateAndTime();
    case DEFAULT_EXPERIMENT:
      return isSetDefaultExperiment();
    case VARIABLE_NAMING_CONVENTION:
      return isSetVariableNamingConvention();
    case MODEL_VARIABLES:
      return isSetModelVariables();
    case MODEL_STRUCTURE:
      return isSetModelStructure();
    case MODEL_IDENTIFIER:
      return isSetModelIdentifier();
    case CAN_GET_AND_SET_FMU_STATE:
      return isSetCanGetAndSetFmuState();
    case CAN_SERIALIZE_FMU_STATE:
      return isSetCanSerializeFmuState();
    case PROVIDES_DIRECTIONAL_DERIVATIVE:
      return isSetProvidesDirectionalDerivative();
    case CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE:
      return isSetCanHandleVariableCommunicationStepSize();
    case CAN_INTERPOLATE_INPUTS:
      return isSetCanInterpolateInputs();
    case MAX_OUTPUT_DERIVATIVE_ORDER:
      return isSetMaxOutputDerivativeOrder();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelDescription)
      return this.equals((ModelDescription)that);
    return false;
  }

  public boolean equals(ModelDescription that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_guid = true && this.isSetGuid();
    boolean that_present_guid = true && that.isSetGuid();
    if (this_present_guid || that_present_guid) {
      if (!(this_present_guid && that_present_guid))
        return false;
      if (!this.guid.equals(that.guid))
        return false;
    }

    boolean this_present_fmi_version = true && this.isSetFmiVersion();
    boolean that_present_fmi_version = true && that.isSetFmiVersion();
    if (this_present_fmi_version || that_present_fmi_version) {
      if (!(this_present_fmi_version && that_present_fmi_version))
        return false;
      if (!this.fmi_version.equals(that.fmi_version))
        return false;
    }

    boolean this_present_modelName = true && this.isSetModelName();
    boolean that_present_modelName = true && that.isSetModelName();
    if (this_present_modelName || that_present_modelName) {
      if (!(this_present_modelName && that_present_modelName))
        return false;
      if (!this.modelName.equals(that.modelName))
        return false;
    }

    boolean this_present_license = true && this.isSetLicense();
    boolean that_present_license = true && that.isSetLicense();
    if (this_present_license || that_present_license) {
      if (!(this_present_license && that_present_license))
        return false;
      if (!this.license.equals(that.license))
        return false;
    }

    boolean this_present_copyright = true && this.isSetCopyright();
    boolean that_present_copyright = true && that.isSetCopyright();
    if (this_present_copyright || that_present_copyright) {
      if (!(this_present_copyright && that_present_copyright))
        return false;
      if (!this.copyright.equals(that.copyright))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_generation_tool = true && this.isSetGenerationTool();
    boolean that_present_generation_tool = true && that.isSetGenerationTool();
    if (this_present_generation_tool || that_present_generation_tool) {
      if (!(this_present_generation_tool && that_present_generation_tool))
        return false;
      if (!this.generation_tool.equals(that.generation_tool))
        return false;
    }

    boolean this_present_generation_date_and_time = true && this.isSetGenerationDateAndTime();
    boolean that_present_generation_date_and_time = true && that.isSetGenerationDateAndTime();
    if (this_present_generation_date_and_time || that_present_generation_date_and_time) {
      if (!(this_present_generation_date_and_time && that_present_generation_date_and_time))
        return false;
      if (!this.generation_date_and_time.equals(that.generation_date_and_time))
        return false;
    }

    boolean this_present_default_experiment = true && this.isSetDefaultExperiment();
    boolean that_present_default_experiment = true && that.isSetDefaultExperiment();
    if (this_present_default_experiment || that_present_default_experiment) {
      if (!(this_present_default_experiment && that_present_default_experiment))
        return false;
      if (!this.default_experiment.equals(that.default_experiment))
        return false;
    }

    boolean this_present_variable_naming_convention = true && this.isSetVariableNamingConvention();
    boolean that_present_variable_naming_convention = true && that.isSetVariableNamingConvention();
    if (this_present_variable_naming_convention || that_present_variable_naming_convention) {
      if (!(this_present_variable_naming_convention && that_present_variable_naming_convention))
        return false;
      if (!this.variable_naming_convention.equals(that.variable_naming_convention))
        return false;
    }

    boolean this_present_model_variables = true && this.isSetModelVariables();
    boolean that_present_model_variables = true && that.isSetModelVariables();
    if (this_present_model_variables || that_present_model_variables) {
      if (!(this_present_model_variables && that_present_model_variables))
        return false;
      if (!this.model_variables.equals(that.model_variables))
        return false;
    }

    boolean this_present_model_structure = true && this.isSetModelStructure();
    boolean that_present_model_structure = true && that.isSetModelStructure();
    if (this_present_model_structure || that_present_model_structure) {
      if (!(this_present_model_structure && that_present_model_structure))
        return false;
      if (!this.model_structure.equals(that.model_structure))
        return false;
    }

    boolean this_present_model_identifier = true && this.isSetModelIdentifier();
    boolean that_present_model_identifier = true && that.isSetModelIdentifier();
    if (this_present_model_identifier || that_present_model_identifier) {
      if (!(this_present_model_identifier && that_present_model_identifier))
        return false;
      if (!this.model_identifier.equals(that.model_identifier))
        return false;
    }

    boolean this_present_can_get_and_set_fmu_state = true;
    boolean that_present_can_get_and_set_fmu_state = true;
    if (this_present_can_get_and_set_fmu_state || that_present_can_get_and_set_fmu_state) {
      if (!(this_present_can_get_and_set_fmu_state && that_present_can_get_and_set_fmu_state))
        return false;
      if (this.can_get_and_set_fmu_state != that.can_get_and_set_fmu_state)
        return false;
    }

    boolean this_present_can_serialize_fmu_state = true;
    boolean that_present_can_serialize_fmu_state = true;
    if (this_present_can_serialize_fmu_state || that_present_can_serialize_fmu_state) {
      if (!(this_present_can_serialize_fmu_state && that_present_can_serialize_fmu_state))
        return false;
      if (this.can_serialize_fmu_state != that.can_serialize_fmu_state)
        return false;
    }

    boolean this_present_provides_directional_derivative = true;
    boolean that_present_provides_directional_derivative = true;
    if (this_present_provides_directional_derivative || that_present_provides_directional_derivative) {
      if (!(this_present_provides_directional_derivative && that_present_provides_directional_derivative))
        return false;
      if (this.provides_directional_derivative != that.provides_directional_derivative)
        return false;
    }

    boolean this_present_can_handle_variable_communication_step_size = true;
    boolean that_present_can_handle_variable_communication_step_size = true;
    if (this_present_can_handle_variable_communication_step_size || that_present_can_handle_variable_communication_step_size) {
      if (!(this_present_can_handle_variable_communication_step_size && that_present_can_handle_variable_communication_step_size))
        return false;
      if (this.can_handle_variable_communication_step_size != that.can_handle_variable_communication_step_size)
        return false;
    }

    boolean this_present_can_interpolate_inputs = true;
    boolean that_present_can_interpolate_inputs = true;
    if (this_present_can_interpolate_inputs || that_present_can_interpolate_inputs) {
      if (!(this_present_can_interpolate_inputs && that_present_can_interpolate_inputs))
        return false;
      if (this.can_interpolate_inputs != that.can_interpolate_inputs)
        return false;
    }

    boolean this_present_max_output_derivative_order = true;
    boolean that_present_max_output_derivative_order = true;
    if (this_present_max_output_derivative_order || that_present_max_output_derivative_order) {
      if (!(this_present_max_output_derivative_order && that_present_max_output_derivative_order))
        return false;
      if (this.max_output_derivative_order != that.max_output_derivative_order)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGuid()) ? 131071 : 524287);
    if (isSetGuid())
      hashCode = hashCode * 8191 + guid.hashCode();

    hashCode = hashCode * 8191 + ((isSetFmiVersion()) ? 131071 : 524287);
    if (isSetFmiVersion())
      hashCode = hashCode * 8191 + fmi_version.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelName()) ? 131071 : 524287);
    if (isSetModelName())
      hashCode = hashCode * 8191 + modelName.hashCode();

    hashCode = hashCode * 8191 + ((isSetLicense()) ? 131071 : 524287);
    if (isSetLicense())
      hashCode = hashCode * 8191 + license.hashCode();

    hashCode = hashCode * 8191 + ((isSetCopyright()) ? 131071 : 524287);
    if (isSetCopyright())
      hashCode = hashCode * 8191 + copyright.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthor()) ? 131071 : 524287);
    if (isSetAuthor())
      hashCode = hashCode * 8191 + author.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetGenerationTool()) ? 131071 : 524287);
    if (isSetGenerationTool())
      hashCode = hashCode * 8191 + generation_tool.hashCode();

    hashCode = hashCode * 8191 + ((isSetGenerationDateAndTime()) ? 131071 : 524287);
    if (isSetGenerationDateAndTime())
      hashCode = hashCode * 8191 + generation_date_and_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultExperiment()) ? 131071 : 524287);
    if (isSetDefaultExperiment())
      hashCode = hashCode * 8191 + default_experiment.hashCode();

    hashCode = hashCode * 8191 + ((isSetVariableNamingConvention()) ? 131071 : 524287);
    if (isSetVariableNamingConvention())
      hashCode = hashCode * 8191 + variable_naming_convention.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelVariables()) ? 131071 : 524287);
    if (isSetModelVariables())
      hashCode = hashCode * 8191 + model_variables.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelStructure()) ? 131071 : 524287);
    if (isSetModelStructure())
      hashCode = hashCode * 8191 + model_structure.hashCode();

    hashCode = hashCode * 8191 + ((isSetModelIdentifier()) ? 131071 : 524287);
    if (isSetModelIdentifier())
      hashCode = hashCode * 8191 + model_identifier.hashCode();

    hashCode = hashCode * 8191 + ((can_get_and_set_fmu_state) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((can_serialize_fmu_state) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((provides_directional_derivative) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((can_handle_variable_communication_step_size) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((can_interpolate_inputs) ? 131071 : 524287);

    hashCode = hashCode * 8191 + max_output_derivative_order;

    return hashCode;
  }

  @Override
  public int compareTo(ModelDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetGuid()).compareTo(other.isSetGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, other.guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFmiVersion()).compareTo(other.isSetFmiVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFmiVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fmi_version, other.fmi_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelName()).compareTo(other.isSetModelName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelName, other.modelName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLicense()).compareTo(other.isSetLicense());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLicense()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.license, other.license);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCopyright()).compareTo(other.isSetCopyright());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCopyright()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copyright, other.copyright);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGenerationTool()).compareTo(other.isSetGenerationTool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenerationTool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generation_tool, other.generation_tool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGenerationDateAndTime()).compareTo(other.isSetGenerationDateAndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenerationDateAndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.generation_date_and_time, other.generation_date_and_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultExperiment()).compareTo(other.isSetDefaultExperiment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultExperiment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_experiment, other.default_experiment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVariableNamingConvention()).compareTo(other.isSetVariableNamingConvention());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariableNamingConvention()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_naming_convention, other.variable_naming_convention);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelVariables()).compareTo(other.isSetModelVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model_variables, other.model_variables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelStructure()).compareTo(other.isSetModelStructure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelStructure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model_structure, other.model_structure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetModelIdentifier()).compareTo(other.isSetModelIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model_identifier, other.model_identifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCanGetAndSetFmuState()).compareTo(other.isSetCanGetAndSetFmuState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanGetAndSetFmuState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.can_get_and_set_fmu_state, other.can_get_and_set_fmu_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCanSerializeFmuState()).compareTo(other.isSetCanSerializeFmuState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanSerializeFmuState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.can_serialize_fmu_state, other.can_serialize_fmu_state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProvidesDirectionalDerivative()).compareTo(other.isSetProvidesDirectionalDerivative());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvidesDirectionalDerivative()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provides_directional_derivative, other.provides_directional_derivative);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCanHandleVariableCommunicationStepSize()).compareTo(other.isSetCanHandleVariableCommunicationStepSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanHandleVariableCommunicationStepSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.can_handle_variable_communication_step_size, other.can_handle_variable_communication_step_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCanInterpolateInputs()).compareTo(other.isSetCanInterpolateInputs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanInterpolateInputs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.can_interpolate_inputs, other.can_interpolate_inputs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxOutputDerivativeOrder()).compareTo(other.isSetMaxOutputDerivativeOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxOutputDerivativeOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_output_derivative_order, other.max_output_derivative_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ModelDescription(");
    boolean first = true;

    sb.append("guid:");
    if (this.guid == null) {
      sb.append("null");
    } else {
      sb.append(this.guid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fmi_version:");
    if (this.fmi_version == null) {
      sb.append("null");
    } else {
      sb.append(this.fmi_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelName:");
    if (this.modelName == null) {
      sb.append("null");
    } else {
      sb.append(this.modelName);
    }
    first = false;
    if (isSetLicense()) {
      if (!first) sb.append(", ");
      sb.append("license:");
      if (this.license == null) {
        sb.append("null");
      } else {
        sb.append(this.license);
      }
      first = false;
    }
    if (isSetCopyright()) {
      if (!first) sb.append(", ");
      sb.append("copyright:");
      if (this.copyright == null) {
        sb.append("null");
      } else {
        sb.append(this.copyright);
      }
      first = false;
    }
    if (isSetAuthor()) {
      if (!first) sb.append(", ");
      sb.append("author:");
      if (this.author == null) {
        sb.append("null");
      } else {
        sb.append(this.author);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetGenerationTool()) {
      if (!first) sb.append(", ");
      sb.append("generation_tool:");
      if (this.generation_tool == null) {
        sb.append("null");
      } else {
        sb.append(this.generation_tool);
      }
      first = false;
    }
    if (isSetGenerationDateAndTime()) {
      if (!first) sb.append(", ");
      sb.append("generation_date_and_time:");
      if (this.generation_date_and_time == null) {
        sb.append("null");
      } else {
        sb.append(this.generation_date_and_time);
      }
      first = false;
    }
    if (isSetDefaultExperiment()) {
      if (!first) sb.append(", ");
      sb.append("default_experiment:");
      if (this.default_experiment == null) {
        sb.append("null");
      } else {
        sb.append(this.default_experiment);
      }
      first = false;
    }
    if (isSetVariableNamingConvention()) {
      if (!first) sb.append(", ");
      sb.append("variable_naming_convention:");
      if (this.variable_naming_convention == null) {
        sb.append("null");
      } else {
        sb.append(this.variable_naming_convention);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("model_variables:");
    if (this.model_variables == null) {
      sb.append("null");
    } else {
      sb.append(this.model_variables);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model_structure:");
    if (this.model_structure == null) {
      sb.append("null");
    } else {
      sb.append(this.model_structure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("model_identifier:");
    if (this.model_identifier == null) {
      sb.append("null");
    } else {
      sb.append(this.model_identifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("can_get_and_set_fmu_state:");
    sb.append(this.can_get_and_set_fmu_state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("can_serialize_fmu_state:");
    sb.append(this.can_serialize_fmu_state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("provides_directional_derivative:");
    sb.append(this.provides_directional_derivative);
    first = false;
    if (!first) sb.append(", ");
    sb.append("can_handle_variable_communication_step_size:");
    sb.append(this.can_handle_variable_communication_step_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("can_interpolate_inputs:");
    sb.append(this.can_interpolate_inputs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_output_derivative_order:");
    sb.append(this.max_output_derivative_order);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (default_experiment != null) {
      default_experiment.validate();
    }
    if (model_structure != null) {
      model_structure.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelDescriptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ModelDescriptionStandardScheme getScheme() {
      return new ModelDescriptionStandardScheme();
    }
  }

  private static class ModelDescriptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ModelDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guid = iprot.readString();
              struct.setGuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FMI_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fmi_version = iprot.readString();
              struct.setFmiVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelName = iprot.readString();
              struct.setModelNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LICENSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.license = iprot.readString();
              struct.setLicenseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COPYRIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.copyright = iprot.readString();
              struct.setCopyrightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GENERATION_TOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.generation_tool = iprot.readString();
              struct.setGenerationToolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GENERATION_DATE_AND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.generation_date_and_time = iprot.readString();
              struct.setGenerationDateAndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEFAULT_EXPERIMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.default_experiment = new DefaultExperiment();
              struct.default_experiment.read(iprot);
              struct.setDefaultExperimentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VARIABLE_NAMING_CONVENTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.variable_naming_convention = iprot.readString();
              struct.setVariableNamingConventionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MODEL_VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.model_variables = new java.util.ArrayList<ScalarVariable>(_list72.size);
                @org.apache.thrift.annotation.Nullable ScalarVariable _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = new ScalarVariable();
                  _elem73.read(iprot);
                  struct.model_variables.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setModelVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MODEL_STRUCTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.model_structure = new ModelStructure();
              struct.model_structure.read(iprot);
              struct.setModelStructureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MODEL_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.model_identifier = iprot.readString();
              struct.setModelIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CAN_GET_AND_SET_FMU_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.can_get_and_set_fmu_state = iprot.readBool();
              struct.setCanGetAndSetFmuStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CAN_SERIALIZE_FMU_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.can_serialize_fmu_state = iprot.readBool();
              struct.setCanSerializeFmuStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PROVIDES_DIRECTIONAL_DERIVATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.provides_directional_derivative = iprot.readBool();
              struct.setProvidesDirectionalDerivativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.can_handle_variable_communication_step_size = iprot.readBool();
              struct.setCanHandleVariableCommunicationStepSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CAN_INTERPOLATE_INPUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.can_interpolate_inputs = iprot.readBool();
              struct.setCanInterpolateInputsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MAX_OUTPUT_DERIVATIVE_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_output_derivative_order = iprot.readI32();
              struct.setMaxOutputDerivativeOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(struct.guid);
        oprot.writeFieldEnd();
      }
      if (struct.fmi_version != null) {
        oprot.writeFieldBegin(FMI_VERSION_FIELD_DESC);
        oprot.writeString(struct.fmi_version);
        oprot.writeFieldEnd();
      }
      if (struct.modelName != null) {
        oprot.writeFieldBegin(MODEL_NAME_FIELD_DESC);
        oprot.writeString(struct.modelName);
        oprot.writeFieldEnd();
      }
      if (struct.license != null) {
        if (struct.isSetLicense()) {
          oprot.writeFieldBegin(LICENSE_FIELD_DESC);
          oprot.writeString(struct.license);
          oprot.writeFieldEnd();
        }
      }
      if (struct.copyright != null) {
        if (struct.isSetCopyright()) {
          oprot.writeFieldBegin(COPYRIGHT_FIELD_DESC);
          oprot.writeString(struct.copyright);
          oprot.writeFieldEnd();
        }
      }
      if (struct.author != null) {
        if (struct.isSetAuthor()) {
          oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
          oprot.writeString(struct.author);
          oprot.writeFieldEnd();
        }
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.generation_tool != null) {
        if (struct.isSetGenerationTool()) {
          oprot.writeFieldBegin(GENERATION_TOOL_FIELD_DESC);
          oprot.writeString(struct.generation_tool);
          oprot.writeFieldEnd();
        }
      }
      if (struct.generation_date_and_time != null) {
        if (struct.isSetGenerationDateAndTime()) {
          oprot.writeFieldBegin(GENERATION_DATE_AND_TIME_FIELD_DESC);
          oprot.writeString(struct.generation_date_and_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.default_experiment != null) {
        if (struct.isSetDefaultExperiment()) {
          oprot.writeFieldBegin(DEFAULT_EXPERIMENT_FIELD_DESC);
          struct.default_experiment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.variable_naming_convention != null) {
        if (struct.isSetVariableNamingConvention()) {
          oprot.writeFieldBegin(VARIABLE_NAMING_CONVENTION_FIELD_DESC);
          oprot.writeString(struct.variable_naming_convention);
          oprot.writeFieldEnd();
        }
      }
      if (struct.model_variables != null) {
        oprot.writeFieldBegin(MODEL_VARIABLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.model_variables.size()));
          for (ScalarVariable _iter75 : struct.model_variables)
          {
            _iter75.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.model_structure != null) {
        oprot.writeFieldBegin(MODEL_STRUCTURE_FIELD_DESC);
        struct.model_structure.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.model_identifier != null) {
        oprot.writeFieldBegin(MODEL_IDENTIFIER_FIELD_DESC);
        oprot.writeString(struct.model_identifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAN_GET_AND_SET_FMU_STATE_FIELD_DESC);
      oprot.writeBool(struct.can_get_and_set_fmu_state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_SERIALIZE_FMU_STATE_FIELD_DESC);
      oprot.writeBool(struct.can_serialize_fmu_state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROVIDES_DIRECTIONAL_DERIVATIVE_FIELD_DESC);
      oprot.writeBool(struct.provides_directional_derivative);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_HANDLE_VARIABLE_COMMUNICATION_STEP_SIZE_FIELD_DESC);
      oprot.writeBool(struct.can_handle_variable_communication_step_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_INTERPOLATE_INPUTS_FIELD_DESC);
      oprot.writeBool(struct.can_interpolate_inputs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_OUTPUT_DERIVATIVE_ORDER_FIELD_DESC);
      oprot.writeI32(struct.max_output_derivative_order);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelDescriptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ModelDescriptionTupleScheme getScheme() {
      return new ModelDescriptionTupleScheme();
    }
  }

  private static class ModelDescriptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ModelDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGuid()) {
        optionals.set(0);
      }
      if (struct.isSetFmiVersion()) {
        optionals.set(1);
      }
      if (struct.isSetModelName()) {
        optionals.set(2);
      }
      if (struct.isSetLicense()) {
        optionals.set(3);
      }
      if (struct.isSetCopyright()) {
        optionals.set(4);
      }
      if (struct.isSetAuthor()) {
        optionals.set(5);
      }
      if (struct.isSetVersion()) {
        optionals.set(6);
      }
      if (struct.isSetDescription()) {
        optionals.set(7);
      }
      if (struct.isSetGenerationTool()) {
        optionals.set(8);
      }
      if (struct.isSetGenerationDateAndTime()) {
        optionals.set(9);
      }
      if (struct.isSetDefaultExperiment()) {
        optionals.set(10);
      }
      if (struct.isSetVariableNamingConvention()) {
        optionals.set(11);
      }
      if (struct.isSetModelVariables()) {
        optionals.set(12);
      }
      if (struct.isSetModelStructure()) {
        optionals.set(13);
      }
      if (struct.isSetModelIdentifier()) {
        optionals.set(14);
      }
      if (struct.isSetCanGetAndSetFmuState()) {
        optionals.set(15);
      }
      if (struct.isSetCanSerializeFmuState()) {
        optionals.set(16);
      }
      if (struct.isSetProvidesDirectionalDerivative()) {
        optionals.set(17);
      }
      if (struct.isSetCanHandleVariableCommunicationStepSize()) {
        optionals.set(18);
      }
      if (struct.isSetCanInterpolateInputs()) {
        optionals.set(19);
      }
      if (struct.isSetMaxOutputDerivativeOrder()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetGuid()) {
        oprot.writeString(struct.guid);
      }
      if (struct.isSetFmiVersion()) {
        oprot.writeString(struct.fmi_version);
      }
      if (struct.isSetModelName()) {
        oprot.writeString(struct.modelName);
      }
      if (struct.isSetLicense()) {
        oprot.writeString(struct.license);
      }
      if (struct.isSetCopyright()) {
        oprot.writeString(struct.copyright);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetGenerationTool()) {
        oprot.writeString(struct.generation_tool);
      }
      if (struct.isSetGenerationDateAndTime()) {
        oprot.writeString(struct.generation_date_and_time);
      }
      if (struct.isSetDefaultExperiment()) {
        struct.default_experiment.write(oprot);
      }
      if (struct.isSetVariableNamingConvention()) {
        oprot.writeString(struct.variable_naming_convention);
      }
      if (struct.isSetModelVariables()) {
        {
          oprot.writeI32(struct.model_variables.size());
          for (ScalarVariable _iter76 : struct.model_variables)
          {
            _iter76.write(oprot);
          }
        }
      }
      if (struct.isSetModelStructure()) {
        struct.model_structure.write(oprot);
      }
      if (struct.isSetModelIdentifier()) {
        oprot.writeString(struct.model_identifier);
      }
      if (struct.isSetCanGetAndSetFmuState()) {
        oprot.writeBool(struct.can_get_and_set_fmu_state);
      }
      if (struct.isSetCanSerializeFmuState()) {
        oprot.writeBool(struct.can_serialize_fmu_state);
      }
      if (struct.isSetProvidesDirectionalDerivative()) {
        oprot.writeBool(struct.provides_directional_derivative);
      }
      if (struct.isSetCanHandleVariableCommunicationStepSize()) {
        oprot.writeBool(struct.can_handle_variable_communication_step_size);
      }
      if (struct.isSetCanInterpolateInputs()) {
        oprot.writeBool(struct.can_interpolate_inputs);
      }
      if (struct.isSetMaxOutputDerivativeOrder()) {
        oprot.writeI32(struct.max_output_derivative_order);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.guid = iprot.readString();
        struct.setGuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fmi_version = iprot.readString();
        struct.setFmiVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.modelName = iprot.readString();
        struct.setModelNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.license = iprot.readString();
        struct.setLicenseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.copyright = iprot.readString();
        struct.setCopyrightIsSet(true);
      }
      if (incoming.get(5)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.generation_tool = iprot.readString();
        struct.setGenerationToolIsSet(true);
      }
      if (incoming.get(9)) {
        struct.generation_date_and_time = iprot.readString();
        struct.setGenerationDateAndTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.default_experiment = new DefaultExperiment();
        struct.default_experiment.read(iprot);
        struct.setDefaultExperimentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.variable_naming_convention = iprot.readString();
        struct.setVariableNamingConventionIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.model_variables = new java.util.ArrayList<ScalarVariable>(_list77.size);
          @org.apache.thrift.annotation.Nullable ScalarVariable _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = new ScalarVariable();
            _elem78.read(iprot);
            struct.model_variables.add(_elem78);
          }
        }
        struct.setModelVariablesIsSet(true);
      }
      if (incoming.get(13)) {
        struct.model_structure = new ModelStructure();
        struct.model_structure.read(iprot);
        struct.setModelStructureIsSet(true);
      }
      if (incoming.get(14)) {
        struct.model_identifier = iprot.readString();
        struct.setModelIdentifierIsSet(true);
      }
      if (incoming.get(15)) {
        struct.can_get_and_set_fmu_state = iprot.readBool();
        struct.setCanGetAndSetFmuStateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.can_serialize_fmu_state = iprot.readBool();
        struct.setCanSerializeFmuStateIsSet(true);
      }
      if (incoming.get(17)) {
        struct.provides_directional_derivative = iprot.readBool();
        struct.setProvidesDirectionalDerivativeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.can_handle_variable_communication_step_size = iprot.readBool();
        struct.setCanHandleVariableCommunicationStepSizeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.can_interpolate_inputs = iprot.readBool();
        struct.setCanInterpolateInputsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.max_output_derivative_order = iprot.readI32();
        struct.setMaxOutputDerivativeOrderIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

